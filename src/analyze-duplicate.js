#!/usr/bin/env node

/**
 * Analyze specific duplicate message to understand why deduplication fails
 */

const fs = require("fs");
const path = require("path");

function analyzeDuplicate(chatDir, messageText) {
  console.log("=== –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞ ===\n");

  const jsonPath = path.join(chatDir, "chats.json");
  if (!fs.existsSync(jsonPath)) {
    console.error("‚ùå JSON file not found");
    return;
  }

  const data = JSON.parse(fs.readFileSync(jsonPath, "utf8"));
  console.log(`üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${data.length} —Å–æ–æ–±—â–µ–Ω–∏–π...\n`);

  // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
  const matches = data.filter((msg, index) => {
    const body = (msg.messageBody || "").trim();
    return body.includes(messageText);
  });

  if (matches.length === 0) {
    console.log(`‚ùå –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "${messageText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    return;
  }

  console.log(
    `üîç –ù–∞–π–¥–µ–Ω–æ ${matches.length} —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º "${messageText}":\n`
  );

  matches.forEach((msg, i) => {
    console.log(`--- –°–æ–æ–±—â–µ–Ω–∏–µ ${i + 1} ---`);
    console.log(`messageBody: "${msg.messageBody}"`);
    console.log(`formattedName: "${msg.formattedName}"`);
    console.log(`messageTime: "${msg.messageTime}"`);
    console.log(`messageType: "${msg.messageType}"`);
    console.log(`messageId: "${msg.messageId}"`);
    console.log(`phoneNum: "${msg.phoneNum}"`);
    console.log(`country: "${msg.country}"`);
    if (msg.displayName) console.log(`displayName: "${msg.displayName}"`);

    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const normalizedBody = (msg.messageBody || "").trim();
    const normalizedSender =
      msg.formattedName === "You" ? "SELF" : msg.formattedName;
    const normalizedType = msg.messageType || "chat";
    const content = `${normalizedSender}:${normalizedType}:${normalizedBody}`;

    let hash = 0;
    for (let j = 0; j < content.length; j++) {
      const char = content.charCodeAt(j);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }

    console.log(`–•–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞: "${content}" ‚Üí ${hash.toString()}`);
    console.log("");
  });

  // –ü—Ä–æ–≤–µ—Ä–∏–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ —Ö–µ—à–∏
  if (matches.length > 1) {
    const hashes = matches.map((msg) => {
      const normalizedBody = (msg.messageBody || "").trim();
      const normalizedSender =
        msg.formattedName === "You" ? "SELF" : msg.formattedName;
      const normalizedType = msg.messageType || "chat";
      const content = `${normalizedSender}:${normalizedType}:${normalizedBody}`;

      let hash = 0;
      for (let j = 0; j < content.length; j++) {
        const char = content.charCodeAt(j);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return hash.toString();
    });

    const uniqueHashes = new Set(hashes);
    console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π: ${matches.length}`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–µ—à–µ–π: ${uniqueHashes.size}`);
    console.log(`   –•–µ—à–∏: [${hashes.join(", ")}]`);

    if (uniqueHashes.size === 1) {
      console.log(`‚úÖ –•–µ—à–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –î–û–õ–ñ–ù–ê —Ä–∞–±–æ—Ç–∞—Ç—å!`);
    } else {
      console.log(`‚ùå –•–µ—à–∏ —Ä–∞–∑–Ω—ã–µ - –ø–æ—ç—Ç–æ–º—É –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
      console.log(`   –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π.`);
    }
  }
}

if (require.main === module) {
  const args = process.argv.slice(2);
  const chatDir = args[0] || "data/input/2025/1234567890___Test-Chat-Directory";
  const messageText = args[1] || "test@example.com"; // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –¥—É–±–ª–∏–∫–∞—Ç
  analyzeDuplicate(chatDir, messageText);
}

module.exports = { analyzeDuplicate };
