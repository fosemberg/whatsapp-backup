#!/usr/bin/env node

/**
 * Find duplicate messages in chats.json
 */

const fs = require("fs");
const path = require("path");

function findDuplicates(chatDir) {
  console.log("=== –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ===\n");

  const jsonPath = path.join(chatDir, "chats.json");
  if (!fs.existsSync(jsonPath)) {
    console.error("‚ùå JSON file not found");
    return;
  }

  const data = JSON.parse(fs.readFileSync(jsonPath, "utf8"));
  console.log(`üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${data.length} —Å–æ–æ–±—â–µ–Ω–∏–π...\n`);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ messageBody
  const messageGroups = new Map();

  data.forEach((msg, index) => {
    const body = (msg.messageBody || "").trim();
    if (body.length < 5) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    if (!messageGroups.has(body)) {
      messageGroups.set(body, []);
    }
    messageGroups.get(body).push({
      index,
      sender: msg.formattedName || msg.phoneNum,
      time: msg.messageTime,
      type: msg.messageType,
      body: body.substring(0, 50) + (body.length > 50 ? "..." : ""),
    });
  });

  // –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const duplicates = [];
  for (const [body, messages] of messageGroups) {
    if (messages.length > 1) {
      duplicates.push({ body, messages });
    }
  }

  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:\n`);

  duplicates.slice(0, 10).forEach((dup, i) => {
    console.log(`${i + 1}. "${dup.body}" (${dup.messages.length} —Ä–∞–∑):`);
    dup.messages.forEach((msg, j) => {
      console.log(`   ${j + 1}. [${msg.index}] ${msg.sender} (${msg.time})`);
    });
    console.log("");
  });

  if (duplicates.length > 10) {
    console.log(`... –∏ –µ—â–µ ${duplicates.length - 10} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n`);
  }

  // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const targetMessage = duplicates.find(
    (dup) =>
      dup.body.toLowerCase().includes("prefer") &&
      dup.body.toLowerCase().includes("live") &&
      dup.body.toLowerCase().includes("alone")
  );

  if (targetMessage) {
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`);
    console.log(`   "${targetMessage.body}"`);
    console.log(`   –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ${targetMessage.messages.length}`);
    targetMessage.messages.forEach((msg, j) => {
      console.log(
        `   ${j + 1}. [${msg.index}] ${msg.sender} (${msg.time}) [${msg.type}]`
      );
    });
  } else {
    console.log("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ 'prefer live alone' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö");
  }

  return duplicates;
}

if (require.main === module) {
  const args = process.argv.slice(2);
  const chatDir = args[0] || "data/input/2025/1234567890___Test-Chat-Directory";
  findDuplicates(chatDir);
}

module.exports = { findDuplicates };
